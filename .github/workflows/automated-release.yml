name: Automated Release

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  # Job to build the tweak for each scheme (rootless, roothide)
  build:
    runs-on: macos-latest
    strategy:
      matrix:
        # Define the build schemes we want to target
        scheme: [rootless, roothide]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Cache Theos and SDKs
        id: cache-theos
        uses: actions/cache@v4
        with:
          path: /opt/theos
          key: ${{ runner.os }}-theos-sdk-v1

      - name: Get version from tag
        id: get_version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "Building tweak version: $VERSION"
          
      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.2'
          
      - name: Accept Xcode License
        run: sudo xcodebuild -license accept
        
      - name: Install Theos (Roothide)
        if: steps.cache-theos.outputs.cache-hit != 'true'
        run: |
          echo "Setting up Theos directory..."
          sudo mkdir -p /opt/theos
          sudo chown -R $(whoami) /opt/theos
          
          echo "Installing Theos to /opt/theos..."
          export THEOS=/opt/theos
          echo "THEOS=/opt/theos" >> $GITHUB_ENV
          
          git clone --recursive https://github.com/roothide/theos.git /opt/theos
          
          brew install ldid xz
          
      - name: Install iOS SDK
        if: steps.cache-theos.outputs.cache-hit != 'true'
        run: |
          echo "Installing iOS 16.5 SDK..."
          mkdir -p /opt/theos/sdks
          cd /opt/theos/sdks
          for i in {1..3};
            do
              curl -L -o iPhoneOS16.5.sdk.tar.xz https://github.com/theos/sdks/releases/download/master-146e41f/iPhoneOS16.5.sdk.tar.xz && break
              echo "SDK download failed. Retrying in 5 seconds..."
              sleep 5
            done
          tar -xf iPhoneOS16.5.sdk.tar.xz
          rm iPhoneOS16.5.sdk.tar.xz
          echo "Installed SDKs:"
          ls -l /opt/theos/sdks/
          
      - name: Update version in control file
        run: |
          VERSION=${{ steps.get_version.outputs.VERSION }}
          CLEAN_VERSION=${VERSION#v}
          echo "Updating control file with version: $CLEAN_VERSION"
          sed -i.bak "s/^Version:.*/Version: $CLEAN_VERSION/" control
          cat control
          
      - name: Clean and build tweak (${{ matrix.scheme }})
        run: |
          echo "Building tweak for ${{ matrix.scheme }} scheme..."
          export THEOS=/opt/theos
          mkdir -p build-artifacts
          
          ORIG_CONTROL=$(cat control)
          BASE_PKG_NAME=$(grep -i '^Package:' control | awk '{print $2}' | tr -d '\r')

          # Build release version
          echo "Building release package for ${{ matrix.scheme }}""..."
          sed -i.bak "s/^Package:.*/Package: ${BASE_PKG_NAME}-${{ matrix.scheme }}/" control
          echo "Provides: ${BASE_PKG_NAME}" >> control
          
          rm -rf packages
          make clean
          make package FINALPACKAGE=1 THEOS_PACKAGE_SCHEME=${{ matrix.scheme }} ARCHS=arm64
          if ls packages/*.deb 1> /dev/null 2>&1; then
            RELEASE_PKG=$(find packages -name "*.deb" -type f | head -1)
            cp "$RELEASE_PKG" "build-artifacts/release-${{ matrix.scheme }}.deb"
            echo "Release package for ${{ matrix.scheme }} saved."
          fi
          echo "$ORIG_CONTROL" > control

          # Build debug version
          echo "Building debug package for ${{ matrix.scheme }}""..."
          sed -i.bak "s/^Package:.*/Package: ${BASE_PKG_NAME}-${{ matrix.scheme }}-debug/" control
          echo "Provides: ${BASE_PKG_NAME}" >> control

          rm -rf packages
          make clean
          make package DEBUG=1 THEOS_PACKAGE_SCHEME=${{ matrix.scheme }} ARCHS=arm64e
          if ls packages/*.deb 1> /dev/null 2>&1; then
            DEBUG_PKG=$(find packages -name "*.deb" -type f | head -1)
            cp "$DEBUG_PKG" "build-artifacts/debug-${{ matrix.scheme }}.deb"
            echo "Debug package for ${{ matrix.scheme }} saved."
          fi
          echo "$ORIG_CONTROL" > control
          
      - name: Upload build artifacts (${{ matrix.scheme }})
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ matrix.scheme }}
          path: build-artifacts/

  # Job to create a single release after all builds are done
  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version from tag
        id: get_version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/
          
      - name: Prepare and rename release assets
        id: prepare_assets
        run: |
          echo "Preparing release assets..."
          ls -R artifacts/
          
          VERSION=${{ steps.get_version.outputs.VERSION }}
          CLEAN_VERSION=${VERSION#v}
          PACKAGE_NAME=$(grep -i '^Package:' control | awk '{print $2}' | tr -d '\r')

          if [[ -z "$PACKAGE_NAME" ]]; then
            echo "Could not determine package name from control file!"
            exit 1
          fi

          echo "Package name: $PACKAGE_NAME"
          echo "Clean version: $CLEAN_VERSION"

          find artifacts -type f -name "*.deb" | while read -r file;
            do
            if [[ "$file" == *release-rootless.deb ]]; then
              mv "$file" "${GITHUB_WORKSPACE}/${PACKAGE_NAME}-${CLEAN_VERSION}-rootless.deb"
            elif [[ "$file" == *debug-rootless.deb ]]; then
              mv "$file" "${GITHUB_WORKSPACE}/${PACKAGE_NAME}-${CLEAN_VERSION}-rootless-debug.deb"
            elif [[ "$file" == *release-roothide.deb ]]; then
              mv "$file" "${GITHUB_WORKSPACE}/${PACKAGE_NAME}-${CLEAN_VERSION}-roothide.deb"
            elif [[ "$file" == *debug-roothide.deb ]]; then
              mv "$file" "${GITHUB_WORKSPACE}/${PACKAGE_NAME}-${CLEAN_VERSION}-roothide-debug.deb"
            fi
          done

          echo "Renamed assets:"
          ls -l ${GITHUB_WORKSPACE}/*.deb
          
          FILES=$(ls ${GITHUB_WORKSPACE}/*.deb | xargs -n 1 basename | tr '\n' ' ')
          echo "FILES=$FILES" >> $GITHUB_OUTPUT

      - name: Generate changelog
        id: changelog
        run: |
          VERSION=${{ steps.get_version.outputs.VERSION }}
          echo "Generating changelog for version $VERSION"
          
          # Fetch release notes from GitHub API
          RELEASE_DATA=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/$VERSION")
          
          CHANGELOG=$(echo "$RELEASE_DATA" | jq -r .body)
          
          # Fallback to git log if release notes are empty or null
          if [ -z "$CHANGELOG" ] || [ "$CHANGELOG" == "null" ]; then
            echo "No release notes found via API. Falling back to git log."
            PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
            if [[ -n "$PREV_TAG" ]]; then
              CHANGELOG="**Full Changelog**: https://github.com/${{ github.repository }}/compare/$PREV_TAG...$VERSION"
              CHANGELOG+=

            fi
          fi
          echo "$CHANGELOG" > release_notes.md

      - name: Upload release assets
        uses: softprops/action-gh-release@v2
        with:
          files: |
            *.deb
          body_path: release_notes.md
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build summary
        run: |
          echo "## âœ… Release Created" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ steps.get_version.outputs.VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "### Uploaded Assets" >> $GITHUB_STEP_SUMMARY
          for file in ${{ steps.prepare_assets.outputs.FILES }}; do
            echo "- 	$file" >> $GITHUB_STEP_SUMMARY
          done

  # Job to update the external APT repository after the release is created
  update-apt-repo:
    needs: release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: read

    steps:
      - name: Checkout External APT Repo (gh-pages)
        uses: actions/checkout@v4
        with:
          repository: 'kunihir0/WattMaster'
          ref: 'gh-pages'
          path: 'apt-repo'
          token: ${{ secrets.GH_PAT }}

      # Step 2: Get the URLs and correct filenames of the .deb files from the release.
      - name: Get Release Info
        id: release_info
        run: |
          TAG_NAME=${GITHUB_REF#refs/tags/}
          echo "Fetching release info for tag: $TAG_NAME"
          
          RELEASE_DATA=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/$TAG_NAME")
            
          # Get a JSON array of objects, each containing the correct name and the download URL
          DEB_INFO=$(echo "$RELEASE_DATA" | jq -c '[.assets[] | select(.name | endswith(".deb")) | {name: .name, url: .browser_download_url}]')
          
          if [ -z "$DEB_INFO" ] || [ "$DEB_INFO" == "[]" ]; then
            echo "No .deb files found in the release assets for this tweak."
            exit 1
          fi

          # Pass the JSON array to the next step
          echo "deb_info=$DEB_INFO" >> $GITHUB_OUTPUT

      # Step 3: Download the .deb files using their correct names into the cloned external repo.
      - name: Download new .deb files into APT repo
        run: |
          echo "Downloading new .deb files..."
          mkdir -p apt-repo/debs
          
          # Parse the JSON array and loop through each object
          echo '${{ steps.release_info.outputs.deb_info }}' | jq -c '.[]' | while read -r deb;
            do
            # Extract the name and url from the JSON object
            NAME=$(echo "$deb" | jq -r '.name')
            URL=$(echo "$deb" | jq -r '.url')
            
            if [ -n "$URL" ]; then
              echo "Downloading $NAME"
              # Use the correct NAME for the output file
              curl -L "$URL" -o "apt-repo/debs/$NAME"
            fi
          done
          
          echo "New packages added to apt-repo/debs:"
          ls -l apt-repo/debs

      - name: Update APT Repository Index Files
        uses: docker://debian:stable-slim
        with:
          entrypoint: /bin/bash
          args: >
            -c "set -e && 
            apt-get update && 
            apt-get install -y dpkg-dev bzip2 apt-utils && 
            cd /github/workspace/apt-repo && 
            echo 'Scanning all packages...' &&
            dpkg-scanpackages --multiversion . > Packages && 
            bzip2 -k -f Packages && 
            echo 'Generating Release file...' &&
            apt-ftparchive release . > Release"

      - name: Commit and Push to External Repo
        run: |
          cd apt-repo
          git config --global user.name "GitHub Actions"
          git config --global user.email "github-actions@github.com"
          
          if [ -z "$(git status --porcelain)" ]; then
            echo "No changes to the repository. Nothing to commit."
          else
            git add .
            TAG_NAME=${GITHUB_REF#refs/tags/}
            git commit -m "feat: Add ${{ github.repository }}@$TAG_NAME to APT repo"
            
            echo "Pushing changes to kunihir0/WattMaster gh-pages branch..."
            git push
            
            echo "Successfully updated the external APT repository."
          fi

      - name: APT Update Summary
        run: |
          echo "## ðŸ“¦ External APT Repository Updated" >> $GITHUB_STEP_SUMMARY
          echo "The 	gh-pages	 branch of **kunihir0/WattMaster** has been updated with the latest packages from this release." >> $GITHUB_STEP_SUMMARY
